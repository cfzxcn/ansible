- name:
  block:
    - name: Create user "{{ cinderName }}" with passwd in db, "{{ cinderName }}" db privileges and 'WITH GRANT OPTION' in host
      mysql_user:
        login_user: cf
        login_password: cf
        login_host: "{{ ansible_default_ipv4.address }}"    
        state: present
        name: "{{ cinderName }}"
        password: "{{ dbSpasswd }}"
        host: "{{ item }}"
        priv:
          'cinder.*': 'ALL,GRANT'
    #      '"{{ cinderName }}".*': 'ALL,GRANT'
      with_items:
        - localhost
        - "%"
    
    - name: Create "{{ cinderName }}" user 
      shell: source /etc/openrc.sh && openstack user list | grep "{{ cinderName }}" || openstack user create --domain default --password {{ servicePasswd }} "{{ cinderName }}"
    
    - name: openstack role add --project service --user "{{ cinderName }}" admin
      shell: source /etc/openrc.sh && openstack service list | grep "{{ cinderName }}" || openstack role add --project service --user "{{ cinderName }}" admin
    
    - name: openstack service create --name "{{ cinderName }}"v2 --description "OpenStack Block Storage" volumev2
      shell: source /etc/openrc.sh && openstack service list | grep "{{ cinderName }}"v2 || openstack service create --name "{{ cinderName }}"v2 --description "OpenStack Block Storage" volumev2
    
    - name: openstack service create --name "{{ cinderName }}"v3 --description "OpenStack Block Storage" volumev3
      shell: source /etc/openrc.sh && openstack service list | grep "{{ cinderName }}"v3 || openstack service create --name "{{ cinderName }}"v3 --description "OpenStack Block Storage" volumev3
    
    - name: Create endpoint volumev2 on http://controller:{{ cinderPort }}
      shell: source /etc/openrc.sh && if ! openstack endpoint list | grep volumev2;then openstack endpoint create --region RegionOne volumev2 public http://cfvip:{{ cinderPort }}/v2/%\(project_id\)s && openstack endpoint create --region RegionOne volumev2 internal http://cfvip:{{ cinderPort }}/v2/%\(project_id\)s && openstack endpoint create --region RegionOne volumev2 admin http://cfvip:{{ cinderPort }}/v2/%\(project_id\)s;fi
#      shell: source /etc/openrc.sh && if ! openstack endpoint list | grep volumev2;then openstack endpoint create --region RegionOne volumev2 public http://{{ ansible_hostname }}:{{ cinderPort }}/v2/%\(project_id\)s && openstack endpoint create --region RegionOne volumev2 internal http://{{ ansible_hostname }}:{{ cinderPort }}/v2/%\(project_id\)s && openstack endpoint create --region RegionOne volumev2 admin http://{{ ansible_hostname }}:{{ cinderPort }}/v2/%\(project_id\)s;fi

    - name: Create endpoint volumev3 on http://controller:{{ cinderPort }}
      shell: source /etc/openrc.sh && if ! openstack endpoint list | grep volumev3;then openstack endpoint create --region RegionOne volumev3 public http://cfvip:{{ cinderPort }}/v3/%\(project_id\)s && openstack endpoint create --region RegionOne volumev3 internal http://cfvip:{{ cinderPort }}/v3/%\(project_id\)s && openstack endpoint create --region RegionOne volumev3 admin http://cfvip:{{ cinderPort }}/v3/%\(project_id\)s;fi
  when: role == 'bootstrap'

- name: Yum Install "{{ cinderName }}"
  yum: "name=openstack-{{ cinderName }}"
  tags: install"{{ cinderName }}"

- name: Backup {{ cinderName }} conf
  shell: if [ ! -f /etc/"{{ cinderName }}"/"{{ cinderName }}".conf.original ];then cd /etc/"{{ cinderName }}"/ && mv "{{ cinderName }}".conf "{{ cinderName }}".conf.original && egrep -v '^(#|$)' "{{ cinderName }}".conf.original > "{{ cinderName }}".conf && chown root:"{{ cinderName }}" "{{ cinderName }}".conf;fi

#    openstack-config --set /etc/cinder/cinder.conf DEFAULT transport_url rabbit://openstack:cf@cfvip &&
- name: Modify "{{ cinderName }}" conf
  shell: >
    openstack-config --set /etc/cinder/cinder.conf DEFAULT transport_url rabbit://openstack:cf@cfvip &&
    openstack-config --set /etc/cinder/cinder.conf DEFAULT my_ip {{ ansible_facts.ens34.ipv4.address }} &&
    openstack-config --set /etc/cinder/cinder.conf DEFAULT auth_strategy keystone &&
    openstack-config --set /etc/cinder/cinder.conf DEFAULT glance_api_servers http://cfvip:9292 &&
    openstack-config --set /etc/"{{ cinderName }}"/"{{ cinderName }}".conf keystone_authtoken www_authenticate_uri http://cfvip:5000 &&
    openstack-config --set /etc/"{{ cinderName }}"/"{{ cinderName }}".conf keystone_authtoken auth_url http://cfvip:5000 &&
    openstack-config --set /etc/"{{ cinderName }}"/"{{ cinderName }}".conf keystone_authtoken memcached_servers controller:11211,pxc2:11211,pxc3:11211 &&
    openstack-config --set /etc/"{{ cinderName }}"/"{{ cinderName }}".conf keystone_authtoken auth_type password &&
    openstack-config --set /etc/"{{ cinderName }}"/"{{ cinderName }}".conf keystone_authtoken project_domain_name Default &&
    openstack-config --set /etc/"{{ cinderName }}"/"{{ cinderName }}".conf keystone_authtoken user_domain_name Default &&
    openstack-config --set /etc/"{{ cinderName }}"/"{{ cinderName }}".conf keystone_authtoken project_name service &&
    openstack-config --set /etc/"{{ cinderName }}"/"{{ cinderName }}".conf keystone_authtoken username "{{ cinderName }}" &&
    openstack-config --set /etc/"{{ cinderName }}"/"{{ cinderName }}".conf keystone_authtoken password "{{ servicePasswd }}" &&
    openstack-config --set /etc/"{{ cinderName }}"/"{{ cinderName }}".conf database connection mysql+pymysql://"{{ cinderName }}":"{{ dbSpasswd }}"@cfvip:3306/"{{ cinderName }}" &&
    openstack-config --set /etc/cinder/cinder.conf oslo_concurrency lock_path /var/lib/cinder/tmp

- name: Modify /etc/nova/nova.conf
  shell: >
    openstack-config --set /etc/nova/nova.conf cinder os_region_name RegionOne

- name: "{{ cinderName }} initialize"
  shell: su -s /bin/sh -c "{{ cinderName }}-manage db sync" "{{ cinderName }}"
  when: role == 'bootstrap'

- name: Restart openstack-nova-api service
  service: name=openstack-nova-api state=restarted

- name: systemctl enable --now openstack-cinder-api openstack-cinder-scheduler
  shell: systemctl enable --now openstack-cinder-api openstack-cinder-scheduler


