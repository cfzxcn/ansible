- name: mkdir /root/.kube -p
  file: path="/root/.kube" state=directory recurse=yes

- name:
  block:
    - name: Generate admin-csr.json
      template:
        src: "kubernetes/{{ item }}.j2"
        dest: "{{ kuberPath }}/{{ item }}"
      loop:
        - admin-csr.json
######################################################################
# 部署kubectl
    - name: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin
      shell: "cfssl gencert -ca=ssl/ca.pem -ca-key=ssl/ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare ssl/admin"
      args:
        chdir: "{{ kuberPath }}"

    - name: Copy {{ kuberPath }}/ssl/admin*.pem to all nodes
      shell: "for NODE in 4 6 7 8;do rsync -az {{ kuberPath }}/ssl/admin*.pem c$NODE:{{ kuberPath }}/ssl;done"
#########################################################################
#    - name: Generate {{ kuberPath }}/cfg/bootstrap.secret.yaml
#      template: src=kubernetes/bootstrap.secret.yaml.j2 dest={{ kuberPath }}/cfg/bootstrap.secret.yaml
#########################################################################
# 部署kubectl，生成kube.config配置文件
    - name: kubectl config admin set-cluster kubernetes
      shell: "kubectl config set-cluster kubernetes \
      --certificate-authority={{ kuberPath }}/ssl/ca.pem \
      --embed-certs=true --server={{ httpskvip }} \
      --kubeconfig={{ kuberPath }}/kube.config"

    - name: kubectl config set-credentials admin
      shell: "kubectl config set-credentials admin \
      --client-certificate={{ kuberPath }}/ssl/admin.pem \
      --client-key={{ kuberPath }}/ssl/admin-key.pem \
      --embed-certs=true \
      --kubeconfig={{ kuberPath }}/kube.config"

    - name: kubectl config set-context admin
      shell: "kubectl config set-context kubernetes \
      --cluster=kubernetes --user=admin \
      --kubeconfig={{ kuberPath }}/kube.config"
 
    - name: kubectl config use-context admin
      shell: "kubectl config use-context kubernetes \
      --kubeconfig={{ kuberPath }}/kube.config"

#########################################################################
#    - name: copy {{ ansible_hostname}} {{ kuberPath }}/cfg/admin.kubeconfig to /root/.kube/config
#      copy:
#        remote_src: yes
#        src: "{{ kuberPath }}/cfg/admin.kubeconfig"
#        dest: /root/.kube/config
#    - name: kubectl create -f {{ kuberPath }}/cfg/bootstrap.secret.yaml
#      shell: "kubectl create -f {{ kuberPath }}/cfg/bootstrap.secret.yaml"
    - name: copy {{ kuberPath }}/kube.config /root/.kube/config
      shell: "cp {{ kuberPath }}/kube.config /root/.kube/config"
# 角色绑定
    - name: kubectl create clusterrolebinding admin
      shell: "kubectl create clusterrolebinding kube-apiserver:kubelet-apis \
      --clusterrole=system:kubelet-api-admin --user kubernetes \
      --kubeconfig=/root/.kube/config"
    
    - name: Generate /root/.kube/config to all nodes
      shell: "for i in 4 6 7 8;do rsync -az /root/.kube/config c$i:/root/.kube/config;done"

  when: ansible_hostname == 'c1'

##########################################################################
# 安装kubectl的自动补全
- name: source /usr/share/bash-completion/bash_completion
  shell: "source /usr/share/bash-completion/bash_completion"
  args:
    executable: /bin/bash

- name: source <(kubectl completion bash)
  shell: "source <(kubectl completion bash)"
  args:
    executable: /bin/bash

- name: kubectl completion bash > ~/.kube/completion.bash.inc
  shell: "kubectl completion bash > ~/.kube/completion.bash.inc"
  args:
    executable: /bin/bash

- name: source /root/.kube/completion.bash.inc
  shell: "source /root/.kube/completion.bash.inc"
  args:
    executable: /bin/bash

- name: source $HOME/.bash_profile
  shell: "source $HOME/.bash_profile"
  args:
    executable: /bin/bash
###########################################################################






