- name: mkdir /opt/kubernetes/{bin,cfg,ssl,logs} -p
  file:
    path: "/opt/kubernetes/{{ item }}"
    state: directory
    recurse: yes
  loop:
    - bin
    - cfg
    - ssl
    - logs

- name: Copy kube-apiserver kube-scheduler kube-controller-manager /opt/kubernetes/bin
  copy:
    src: "kubernetes/server/bin/{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: u+x
  loop:
    - { src: 'kube-apiserver', dest: '/opt/kubernetes/bin' }
    - { src: 'kube-scheduler', dest: '/opt/kubernetes/bin' }
    - { src: 'kube-controller-manager', dest: '/opt/kubernetes/bin' }
    - { src: 'kubectl', dest: '/opt/kubernetes/bin' }
    - { src: 'kubelet', dest: '/opt/kubernetes/bin' }
    - { src: 'kube-proxy', dest: '/opt/kubernetes/bin' }

- name: Append /opt/kubernetes/bin to ~/.bashrc
  lineinfile: path='~/.bashrc' line='PATH=/opt/kubernetes/bin:$PATH' backup=true

- name: Source PATH variable
  shell: "source ~/.bashrc"
  args:
    executable: /bin/bash
#  notify: restart kube-apiserver

- name: Copy /opt/kubernetes/ssl/* to all nodes
  shell: "rsync -az /opt/etcd/ssl/*.pem /opt/kubernetes/ssl"

- name: Generate kube-apiserver.conf
  template:
    src: "kubernetes/{{ item.cfsrc }}"
    dest: "{{ item.cfdest }}"
  loop:
    - { cfsrc: 'kube-apiserver.service.j2', cfdest: '/usr/lib/systemd/system/kube-apiserver.service' }
    - { cfsrc: 'kube-controller-manager.service.j2', cfdest: '/usr/lib/systemd/system/kube-controller-manager.service' }
    - { cfsrc: 'kube-scheduler.service.j2', cfdest: '/usr/lib/systemd/system/kube-scheduler.service' }
    - { cfsrc: 'token.csv.j2', cfdest: '/opt/kubernetes/cfg/token.csv' }
#    token.csv.j2中第一个逗号前的token，是在co7用：head -c 16 /dev/urandom | od -An -t x | tr -d ' '生成的
    - { cfsrc: 'kube-apiserver.conf.j2', cfdest: '/opt/kubernetes/cfg/kube-apiserver.conf' }
    - { cfsrc: 'kube-controller-manager.conf.j2', cfdest: '/opt/kubernetes/cfg/kube-controller-manager.conf' }
#    - { cfsrc: 'kube-controller-manager-csr.json.j2', cfdest: '/opt/kubernetes/cfg/kube-controller-manager-csr.json' }
    - { cfsrc: 'kube-scheduler.conf.j2', cfdest: '/opt/kubernetes/cfg/kube-scheduler.conf' }
#  notify: restart etcd

- name: Start kube-apiserver and daemon-reload
  ansible.builtin.systemd:
    state: started
    enabled: true
    daemon_reload: true
    name: "kube-apiserver.service"

- name: kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap
  shell: "kubectl create clusterrolebinding kubelet-bootstrap \
--clusterrole=system:node-bootstrapper \
--user=kubelet-bootstrap"

- name: Start kube-controller-manager and daemon-reload
  ansible.builtin.systemd:
    state: started
    enabled: true
    daemon_reload: true
    name: "kube-controller-manager.service"

- name: Start kube-scheduler and daemon-reload
  ansible.builtin.systemd:
    state: started
    enabled: true
    daemon_reload: true
    name: "kube-scheduler.service"






