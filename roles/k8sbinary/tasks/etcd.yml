#- name: sed -ri '/^[^#]*swap/s@^@#@' /etc/fstab
#  shell: "sed -ri '/^[^#]*swap/s@^@#@' /etc/fstab"
#
#- name: swapoff
#  shell: "swapoff -a && sysctl -w vm.swappiness=0"
#- name: Generate root's ssh-keygen
#  shell: '[ -f ~/.ssh/id_rsa ] || ssh-keygen -t rsa -q -N "" -f ~/.ssh/id_rsa'
#
#- name: controller sshpass -pcf ssh-copy-id -o StrictHostKeyChecking=no {{ hostName }}
#  shell: "for i in c1 c4;do sshpass -pcf ssh-copy-id -o StrictHostKeyChecking=no $i;done"
- name: mkdir /opt/etcd/{bin,cfg,ssl} -p
  file:
    path: "/opt/etcd/{{ item }}"
    state: directory
    recurse: yes
  loop:
    - bin
    - cfg
    - ssl

- name:
  block:
    - name: Copy cfssl* to /usr/local/bin
      copy: 
        src: "{{ item.cfsrc }}"
        dest: "/usr/local/bin/{{ item.cfdest }}"
        mode: u+x
      loop:
        - { cfsrc: 'cfssl_1.6.4', cfdest: 'cfssl' }
        - { cfsrc: 'cfssljson_1.6.4', cfdest: 'cfssljson' }
#        - { cfsrc: 'cfssl-certinfo_1.6.4', cfdest: 'cfssl-certinfo' }

    - name: Generate ca-config.json  ca-csr.json  server-csr.json
      template:
        src: "{{ item }}.j2"
        dest: "/opt/etcd/ssl/{{ item }}"
      loop:
        - etcd-ca-config.json
        - etcd-ca-csr.json
        - etcd-server-csr.json

    - name: cfssl gencert -initca ca-csr.json | cfssljson -bare ca -
#      shell: "cfssl gencert -initca ca-csr.json | cfssljson -bare ca -"
      shell: "cfssl gencert -initca etcd-ca-csr.json | cfssljson -bare etcd-ca"
      args:
        chdir: /opt/etcd/ssl
    
    - name: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server
      shell: "cfssl gencert -ca=etcd-ca.pem -ca-key=etcd-ca-key.pem -config=etcd-ca-config.json -hostname={{ etcdAddr }} -profile=www etcd-server-csr.json | cfssljson -bare etcd-server"
      args:
        chdir: /opt/etcd/ssl

    - name: Copy /opt/etcd/ssl/* to all nodes
      shell: "for i in c4;do rsync -az /opt/etcd/ssl/*.pem $i:/opt/etcd/ssl;done"
#      shell: "for i in c2;do rsycn -az /opt/etcd/ssl/* $i:/opt/etcd/ssl;done"
  
  when: ansible_hostname == 'c1'

- name: Copy etcdctl and etcd to /opt/etcd/bin/
  copy:
    src: "{{ item.src }}"
    dest: "/opt/etcd/{{ item.dest }}"
    mode: u+x
  loop:
    - { src: 'etcd', dest: 'bin' }
    - { src: 'etcdctl', dest: 'bin' }
# etcd和etcdctl这两个文件是拷贝的etcd-v3.5.10-linux-amd64.tar.gz中解压出来的

- name: Append /opt/etcd/bin to ~/.bashrc
  lineinfile: path='~/.bashrc' line='PATH=/opt/etcd/bin:$PATH' backup=true

- name: Source PATH variable
  shell: "source ~/.bashrc"
  args:
    executable: /bin/bash
  notify: restart etcd

- name: Generate etcd.service and etcd.conf
  template:
    src: "{{ item.cfsrc }}"
    dest: "{{ item.cfdest }}"
  loop:
    - { cfsrc: 'etcd.service.j2', cfdest: '/usr/lib/systemd/system/etcd.service' }
    - { cfsrc: 'etcd.conf.j2', cfdest: '/opt/etcd/cfg/etcd.conf' }
#    force: yes
  notify: restart etcd

- name: Start etcd and daemon-reload
  ansible.builtin.systemd:
    state: started
    enabled: true
    daemon_reload: true
    name: "etcd.service"

