- name: mkdir /opt/kubernetes/{bin,cfg,ssl,logs} -p
  file:
    path: "/opt/kubernetes/{{ item }}"
    state: directory
    recurse: yes
  loop:
    - bin
    - cfg
    - ssl
    - logs

- name:
  block:
    - name: Generate ca-config.json  ca-csr.json  server-csr.json
      template:
        src: "kubernetes/{{ item }}.j2"
        dest: "/opt/kubernetes/ssl/{{ item }}"
#        src: "kubernetes/{{ item.cfsrc }}"
#        dest: "/opt/kubernetes/ssl/{{ item.cfdest }}"
      loop:
        - kube-ca-config.json
        - kube-server-csr.json
        - kube-scheduler-csr.json
        - kube-ca-csr.json
        - kube-apiserver-csr.json
        - kube-controller-manager-csr.json
        - kube-proxy-csr.json
        - admin-csr.json

    - name: cfssl gencert -initca ca-csr.json | cfssljson -bare ca -
      shell: "cfssl gencert -initca kube-ca-csr.json | cfssljson -bare kube-ca"
      args:
        chdir: /opt/kubernetes/ssl

    - name: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server
      shell: "cfssl gencert -ca=kube-ca.pem -ca-key=kube-ca-key.pem -config=kube-ca-config.json -hostname={{ kubeAddr }} -profile=kubernetes kube-apiserver-csr.json | cfssljson -bare apiserver"
      args:
        chdir: /opt/kubernetes/ssl
    
#    - name: cfssl gencert -initca ca-csr.json | cfssljson -bare ca -
#      shell: "cfssl gencert -initca kube-proxy-csr.json | cfssljson -bare front-proxy-ca"
#      args:
#        chdir: /opt/kubernetes/ssl
#
#    - name: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server
#      shell: "cfssl gencert -ca=front-proxy-ca.pem -ca-key=front-proxy-ca-key.pem -config=kube-ca-config.json -profile=kubernetes front-proxy-client-csr.json | cfssljson -bare front-proxy-client"
#      args:
#        chdir: /opt/kubernetes/ssl

    - name: cfssl gencert -ca=kube-ca.pem -ca-key=kube-ca-key.pem -config=kube-ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare controller-manager
      shell: "cfssl gencert -ca=kube-ca.pem -ca-key=kube-ca-key.pem -config=kube-ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare controller-manager"
      args:
        chdir: /opt/kubernetes/ssl

    - name: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler
      shell: "cfssl gencert -ca=kube-ca.pem -ca-key=kube-ca-key.pem -config=kube-ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare scheduler"
      args:
        chdir: /opt/kubernetes/ssl

    - name: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler
      shell: "cfssl gencert -ca=kube-ca.pem -ca-key=kube-ca-key.pem -config=kube-ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin"
      args:
        chdir: /opt/kubernetes/ssl

    - name: Copy /opt/kubernetes/ssl/* to all nodes
      shell: "for i in c4;do rsync -az /opt/kubernetes/ssl/*.pem $i:/opt/kubernetes/ssl;done"

  when: ansible_hostname == 'c1'

- name: Copy kube-apiserver kube-scheduler kube-controller-manager /opt/kubernetes/bin
  copy:
    src: "kubernetes/server/bin/{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: u+x
  loop:
    - { src: 'kube-apiserver', dest: '/opt/kubernetes/bin' }
    - { src: 'kube-scheduler', dest: '/opt/kubernetes/bin' }
    - { src: 'kube-controller-manager', dest: '/opt/kubernetes/bin' }
    - { src: 'kubectl', dest: '/opt/kubernetes/bin' }
    - { src: 'kubelet', dest: '/opt/kubernetes/bin' }

- name: Append /opt/kubernetes/bin to ~/.bashrc
  lineinfile: path='~/.bashrc' line='PATH=/opt/kubernetes/bin:$PATH' backup=true

- name: Source PATH variable
  shell: "source ~/.bashrc"
  args:
    executable: /bin/bash
#  notify: restart kube-apiserver

- name: Generate kube-apiserver.conf
  template:
    src: "kubernetes/{{ item.cfsrc }}"
    dest: "{{ item.cfdest }}"
  loop:
    - { cfsrc: 'kube-apiserver.service.j2', cfdest: '/usr/lib/systemd/system/kube-apiserver.service' }
    - { cfsrc: 'kube-controller-manager.service.j2', cfdest: '/usr/lib/systemd/system/kube-controller-manager.service' }
    - { cfsrc: 'kube-scheduler.service.j2', cfdest: '/usr/lib/systemd/system/kube-scheduler.service' }
    - { cfsrc: 'token.csv.j2', cfdest: '/opt/kubernetes/cfg/token.csv' }
#    token.csv.j2中第一个逗号前的token，是在co7用：head -c 16 /dev/urandom | od -An -t x | tr -d ' '生成的
    - { cfsrc: 'kube-apiserver.conf.j2', cfdest: '/opt/kubernetes/cfg/kube-apiserver.conf' }
    - { cfsrc: 'kube-controller-manager.conf.j2', cfdest: '/opt/kubernetes/cfg/kube-controller-manager.conf' }
    - { cfsrc: 'kube-controller-manager-csr.json.j2', cfdest: '/opt/kubernetes/cfg/kube-controller-manager-csr.json' }
    - { cfsrc: 'kube-scheduler.conf.j2', cfdest: '/opt/kubernetes/cfg/kube-scheduler.conf' }
#  notify: restart etcd

- name: Start kube-apiserver and daemon-reload
  ansible.builtin.systemd:
    state: started
    enabled: true
    daemon_reload: true
    name: "kube-apiserver.service"

#- name:
#  block:
#    - name: kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap
#      shell: "kubectl create clusterrolebinding kubelet-bootstrap \
#--clusterrole=system:node-bootstrapper \
#--user=kubelet-bootstrap"
#  when: ansible_hostname == 'c1'

- name: Start kube-controller-manager and daemon-reload
  ansible.builtin.systemd:
    state: started
    enabled: true
    daemon_reload: true
    name: "kube-controller-manager.service"

- name: Start kube-scheduler and daemon-reload
  ansible.builtin.systemd:
    state: started
    enabled: true
    daemon_reload: true
    name: "kube-scheduler.service"






