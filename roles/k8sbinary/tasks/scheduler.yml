- name:
  block:
    - name: Generate kube-scheduler-csr.json
      template:
        src: "kubernetes/{{ item }}.j2"
        dest: "{{ kuberPath }}/{{ item }}"
      loop:
        - kube-scheduler-csr.json

#########################################################################

    - name: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler
      shell: "cfssl gencert -ca=ssl/ca.pem -ca-key=ssl/ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare ssl/scheduler"
      args:
        chdir: "{{ kuberPath }}"

    - name: Copy {{ kuberPath }}/ssl/scheduler*.pem to other master node
      shell: "for NODE in 4 6;do rsync -az {{ kuberPath }}/ssl/scheduler*.pem c$NODE:{{ kuberPath }}/ssl;done"

##################################################################
    - name: kubectl config kube-scheduler set-cluster kubernetes
      shell: "kubectl config set-cluster kubernetes \
     --certificate-authority={{ kuberPath }}/ssl/ca.pem \
     --embed-certs=true --server={{ httpskvip }} \
     --kubeconfig={{ kuberPath }}/cfg/scheduler.kubeconfig"

    - name: kubectl config kube-scheduler set-credentials
      shell: "kubectl config set-credentials system:kube-scheduler \
    --client-certificate={{ kuberPath }}/ssl/scheduler.pem \
    --client-key={{ kuberPath }}/ssl/scheduler-key.pem \
    --embed-certs=true \
    --kubeconfig={{ kuberPath }}/cfg/scheduler.kubeconfig"

    - name: kubectl config kube-scheduler set-context default
      shell: "kubectl config set-context system:kube-scheduler@kubernetes \
    --cluster=kubernetes  --user=system:kube-scheduler \
    --kubeconfig={{ kuberPath }}/cfg/scheduler.kubeconfig"

    - name: kubectl config kube-scheduler use-context
      shell: "kubectl config use-context system:kube-scheduler@kubernetes \
      --kubeconfig={{ kuberPath }}/cfg/scheduler.kubeconfig"

    - name: Copy {{ kuberPath }}/cfg/scheduler.kubeconfig  to other master node
      shell: "for i in 4 6;do rsync -az {{ kuberPath }}/cfg/scheduler.kubeconfig c$i:{{ kuberPath }}/cfg/;done"

#################################################################

  when: ansible_hostname == 'c1'

- name:
  block:
    - name: copy kube-scheduler.service
      template:
        src: "kubernetes/{{ item.cfsrc }}"
        dest: "{{ item.cfdest }}"
      loop:
        - { cfsrc: 'kube-scheduler.service.j2', cfdest: '/usr/lib/systemd/system/kube-scheduler.service' }
#        - { cfsrc: 'kube-scheduler.conf.j2', cfdest: '/opt/kubernetes/cfg/kube-scheduler.conf' }
#      notify: restart etcd

    - name: Start kube-scheduler and daemon-reload
      ansible.builtin.systemd:
        state: started
        enabled: true
        daemon_reload: true
        name: "kube-scheduler.service"

  when: ansible_hostname == 'c1' or ansible_hostname == 'c4' or ansible_hostname == 'c6'

