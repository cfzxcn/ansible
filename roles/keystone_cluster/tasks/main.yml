- name: yum install centos-release-openstack-train python-openstackclient openstack-utils
  yum: name=centos-release-openstack-train update_cache=yes

- name: yum install python-openstackclient,openstack-utils
  yum: name="python-openstackclient,openstack-utils"

- name: mv /etc/yum.repos.d/epel.repo /tmp
  shell: if [ -f /etc/yum.repos.d/epel.repo ];then mv /etc/yum.repos.d/epel.repo /tmp;fi

- name: Create OpenStack All Databases
  mysql_db: 
    name: "keystone,placement,glance,neutron,cinder,nova,nova_api,nova_cell0"
    login_user: cf
#   login_password: "{{ dbRootPasswd }}"
    login_password: cf
#    login_unix_socket: "/var/lib/mysql/mysql.sock"
    login_host: "{{ ansible_default_ipv4.address }}"
#    login_port: 3306
#  tags:
#    -  createdb
#  when: role == 'ha1'
  when: role == 'bootstrap'

- name: Create user keystone with passwd, keystone db privileges and 'WITH GRANT OPTION' in host
  mysql_user:
    login_user: cf
    login_password: cf
    login_host: "{{ ansible_default_ipv4.address }}"
    state: present
    name: keystone
    password: "{{ servicePasswd }}"
    host: "{{ item }}"
    priv:
      'keystone.*': 'ALL,GRANT'
  with_items:
    - localhost
    - "%"
  when: role == 'bootstrap'

- name: Yum Install Keystone
  yum: name=openstack-keystone,httpd,mod_wsgi state=latest

- name: Backup keystone conf
  shell: "if [ ! -f /etc/keystone/keystone.conf.original ];then cd /etc/keystone/ && mv keystone.conf keystone.conf.original && egrep -v '^(#|$)' keystone.conf.original > keystone.conf && chown root:keystone keystone.conf;fi"

- name: Modify keystone conf
  shell: openstack-config --set /etc/keystone/keystone.conf database connection mysql+pymysql://keystone:cf@cfvip:3306/keystone && openstack-config --set /etc/keystone/keystone.conf token provider fernet
#  shell: openstack-config --set /etc/keystone/keystone.conf database connection mysql+pymysql://keystone:cf@cfvip:{{ dbPort }}/keystone && openstack-config --set /etc/keystone/keystone.conf token provider fernet

- name: keystone initialize
  shell: 'su -s /bin/sh -c "keystone-manage db_sync" keystone && \
keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone && \
keystone-manage credential_setup --keystone-user keystone --keystone-group keystone'
  when: role == 'bootstrap'

- name: scp fernet-keys credential-keys to other node
  shell: "for i in 2 3;do scp -r /etc/keystone/{fernet-keys,credential-keys} pxc$i:/etc/keystone;done"
  when: role == 'bootstrap'

- name: chown -R keystone:keystone /etc/keystone/fernet-keys/credential-keys
  file: 
    path: "/etc/keystone/{{ item }}"
    owner: keystone
    group: keystone
  loop:
    - fernet-keys
    - credential-keys

- name: Create endpoint
  shell: "keystone-manage bootstrap --bootstrap-password cf \
--bootstrap-admin-url http://cfvip:5000/v3/ \
--bootstrap-internal-url http://cfvip:5000/v3/ \
--bootstrap-public-url http://cfvip:5000/v3/ \
--bootstrap-region-id RegionOne"
  when: role == 'bootstrap'

- name: Modify httpd.conf and Create soft link
  shell: 'if ! grep {{ ansible_fqdn }} /etc/httpd/conf/httpd.conf;then echo "ServerName {{ ansible_fqdn }}" >> /etc/httpd/conf/httpd.conf && ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/;fi'
  notify: "restart httpd"

- name: Start httpd service
  service:
    name: httpd
    state: restarted
    enabled: yes

- name: Config env variable
  shell:
    cmd: |
      echo -e "\n" > /etc/openrc.sh
      cat > /etc/openrc.sh <<EOF
      export OS_USERNAME=admin
      export OS_PASSWORD=cf
      export OS_PROJECT_NAME=admin
      export OS_USER_DOMAIN_NAME=Default
      export OS_PROJECT_DOMAIN_NAME=Default
      export OS_AUTH_URL=http://cfvip:5000/v3
      export OS_IDENTITY_API_VERSION=3
      export OS_IMAGE_API_VERSION=2
      EOF

- name: source /etc/openrc.sh
  shell: "grep openrc /etc/profile || echo 'source /etc/openrc.sh' >> /etc/profile;source /etc/profile"

- name: Create Project service
  shell: 'source /etc/openrc.sh && openstack project list | grep service || openstack project create --domain default --description "Service Project" service'
  when: role == 'bootstrap'

- name: Create role user
  shell: "source /etc/openrc.sh && openstack role list | grep user || openstack role create user"
  when: role == 'bootstrap'





