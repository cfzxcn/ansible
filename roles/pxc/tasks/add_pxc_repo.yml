#- name: Add and Toggle tsinghua pxc57 repo
#  block:
- name: yum install MySQL-python
  yum: name=MySQL-python

- name: yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm MySQL-python
  yum:
    name: "https://repo.percona.com/yum/percona-release-latest.noarch.rpm,MySQL-python"
    update_cache: yes
#- name: Replace percona-prel-release.repo
#  replace:
#    path: /etc/yum.repos.d/percona-prel-release.repo
#    regexp: 'http://repo.percona.com/prel/yum/release/\$releasepxcVer/RPMS/noarch'
#    replace: 'https://mirrors.tuna.tsinghua.edu.cn/percona/release/$releasepxcVer/RPMS/$basearch'

- name: percona-release setup pxc-57 && percona-release enable tools release
  shell: "percona-release setup pxc-57 && percona-release enable tools release"
  when: pxcVer8=='false'

- name: percona-release setup pxc-80 && percona-release enable tools release
  shell: "percona-release setup pxc-80 && percona-release enable tools release"
  when: pxcVer8=='true'

- name: Replace percona-pxc-80-release.repo
  replace:
    path: /etc/yum.repos.d/percona-pxc-80-release.repo
    regexp: 'http://repo.percona.com/pxc-80/yum/release/\$releasever/RPMS/x86_64'
    replace: 'https://mirrors.tuna.tsinghua.edu.cn/percona/pxc-80/yum/release/$releasever/RPMS/$basearch'
  when: pxcVer8=='true'

#- name: Add and Toggle tsinghua pxc57 repo
#  block:
#    - name: Add pxc57 repo
#      yum_repository:
#        name: pxc57
#        description: pxc57 repo
#        baseurl: https://mirrors.tuna.tsinghua.edu.cn/percona/release/$releasepxcVer/RPMS/$basearch
#        gpgcheck: no
#        enabled: 1
#  #    gpgkey: https://nginx.org/keys/nginx_signing.key
#    - name: percona-release enable pxc-57 release
#      shell: percona-release enable pxc-57 release
#- name: Import /etc/pki/rpm-gpg/PERCONA-PACKAGING-KEY
#  rpm_key:
#    state: present
#    key: /etc/pki/rpm-gpg/PERCONA-PACKAGING-KEY
#
#- name: Install openssl socat perl-DBD-MySQL percona-xtrabackup-24 qpress
#  ansible.builtin.yum:
#    name:
#      - openssl
#      - socat
#      - perl-DBD-MySQL
#      - percona-xtrabackup-24
#      - qpress
#    state: present

- name: yum remove mariadb-devel mariadb-libs
  yum: name="mariadb-devel,mariadb-libs" state=absent

- name: Install Percona-XtraDB-Cluster-57
  yum: name=Percona-XtraDB-Cluster-57 state=present
  when: pxcVer8=='false'

- name: yum install percona-xtradb-cluster 8
  yum: name=percona-xtradb-cluster state=present
  when: pxcVer8=='true'

- name: Setup first node step1
  block:
    - name: Setup first mysql node 
      ansible.builtin.debug:
        msg: Setup first mysql node

    - name: First mysql node start
      service: name=mysql.service state=started

    - name: grep "temporary password" /var/log/mysqld.log on mysql@bootstrap
      shell: echo `grep "temporary password" /var/log/mysqld.log -m1 | awk '{print $NF}'`
      register: dbRootPasswd_temp
    
    - name: Set new password for mysql root user
      shell: mysql -NBe "alter user 'root'@'localhost' identified by '{{ dbRootPasswd }}';" --connect-expired-password -uroot -p'{{ dbRootPasswd_temp.stdout }}'

    - name: Add root@{{ internal_net }}
      shell: mysql -p'{{ dbRootPasswd }}' -e "alter user 'root'@'{{ internal_net }}' identified by '{{ dbRootPasswd }}';"
# 5.7中失败，看来要用添加用户指定密码的方式才行，因为root'@'{{ internal_net }}不存在，所以改不了
    - name: service mysql stop
      service: name=mysql.service state=stopped

  when: role=='bootstrap'

- name: push mysqld.cnf.j2 and wsrep.cnf.j2 to cluster nodes
  template:
    src: "{{ item.src }}"
    dest: "/etc/percona-xtradb-cluster.conf.d/{{ item.dest }}"
    mode: 644
    owner: root
    group: root
    backup: yes
  loop:
#     - { src: 'mysqld.cnf.j2', dest: 'mysqld.cnf' }
    - { src: 'wsrep.cnf.j2', dest: 'wsrep.cnf' }
  when: pxcVer8=='false'

- name: push my.cnf.j2 to cluster nodes
  template:
    src: "{{ item.src }}"
    dest: "/etc/{{ item.dest }}"
    mode: 644
    owner: root
    group: root
    backup: yes
  loop:
    - { src: 'my.cnf.j2', dest: 'my.cnf' }
  when: pxcVer8=='true'

- name: Setup first node step2
  block:
    - name: Start mysql@bootstrap.service
      service: name=mysql@bootstrap.service state=started
# pxc8不能也不应设置enabled=yes，否则安装过程出错，无法继续；pxc57不受影响
      register: mysql_bootstrap_out

    - name: show mysql_bootstrap_out
      debug: var=mysql_bootstrap_out verbosity=0

    - name: set pxc57 wsrep_sst_auth_user
      shell: mysql -uroot -p'{{ dbRootPasswd }}' -e "create user '{{ wsrep_sst_auth_user }}'@'localhost' identified by '{{ wsrep_sst_auth_password }}';"
      when: pxcVer8=='false'
    
    - name: pxc57 GRANT sstuser
      shell: mysql -uroot -p'{{ dbRootPasswd }}' -e "grant reload, lock tables, replication client, process on *.* to '{{ wsrep_sst_auth_user }}'@'localhost';"
      when: pxcVer8=='false'
    
    - name: pxc57 set app user cf and grant all privileges
      shell: mysql -uroot -p'{{ dbRootPasswd }}' -e "grant all privileges on *.* to '{{ app_user }}'@'{{ internal_net }}' identified by '{{ app_password }}';"
      when: pxcVer8=='false'
   
    - name: pxc8 set app user cf and grant all privileges
      shell: mysql -uroot -p'{{ dbRootPasswd }}' -e "create user '{{ app_user }}'@'{{ internal_net }}' identified by '{{ app_password }}';" -e "grant all privileges on *.* to '{{ app_user }}'@'{{ internal_net }}' with grant option;"
      when: pxcVer8=='true'

    - name: create database {{ dbName }}
      shell: mysql -uroot -p'{{ dbRootPasswd }}' -e "create database {{ dbName }} DEFAULT CHARSET utf8 COLLATE utf8_general_ci;"

    - name: flush privileges
      shell: mysql -uroot -p'{{ dbRootPasswd }}' -e "flush privileges;"

#    - name: pxc8 rsync controller's /var/lib/mysql/*.pem to pxc2 pxc3
#      shell: "for i in pxc2 pxc3;do rsync -a /var/lib/mysql/*.pem $i:/var/lib/mysql/;done"
#      when: pxcVer8=='true'
  when: role=='bootstrap'

- name: Pause for 16 seconds to start the third mysql node
  pause: seconds=16
- name: start the second mysql.service
  service:
    name: mysql
    state: started
  when: role=='mysql2'

- name: Pause for 16 seconds to start the third mysql node
  pause: seconds=16
- name: start the third mysql.service
  service:
    name: mysql
    state: started
  when: role=='mysql3'
# pxc8这里启动第二、三节点的mysql会报错，需要把节点1的/var/lib/mysql/*.pem拷贝到二三节点的/var/lib/mysql/目录下替换它们的*.pem，这样三个节点的.pem文件都会统一，但如果在二三节点启动前提前拷贝这些文件到它们的/var/lib/mysql/，由于此目录不为空，那么第二三节点的数据库就无法生成，所以也无法启动；所以必须先启动一下第二三节点，虽然会报错，目的是能生成数据库目录中的文件，再复制第一节点的*.pem文件到二三节点，再启动二三节点就正常了，用了一个较笨的办法
- name: pxc8 rsync controller's /var/lib/mysql/*.pem to pxc2 pxc3
  shell: "for i in pxc2 pxc3;do rsync -a /var/lib/mysql/*.pem $i:/var/lib/mysql/;done"
#  shell: "for i in pxc2 pxc3;do rsync -a /var/lib/mysql/*.dat $i:/var/lib/mysql/;done"
  when: pxcVer8=='true' and role=='bootstrap'

- name: start the second mysql.service
  service:
    name: mysql
    state: started
    enabled: yes
  when: pxcVer8=='true' and role=='mysql2'
 
- name: Pause for 16 seconds to start the third mysql node
  pause: seconds=16
  when: pxcVer8=='true'

- name: start the third mysql.service
  service:
    name: mysql
    state: started
    enabled: yes
  when: pxcVer8=='true' and role=='mysql3'












